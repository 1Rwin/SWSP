
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <h2>Statystyka - zmiana parametrów w czasie</h2>
    <br />

    <div class="row">
        <div class="col-md-2">
            <select id="playerList" class="form-control"></select>
        </div>
    </div>
    <canvas id="myChart"></canvas>
    <br />
    <a class="btn btn-success" id="export">Export to excel</a>
</div>

@section scripts
{
    <script src="~/Scripts/jquery.signalR-2.2.3.js"></script>
    <script src="~/signalr/hubs" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
    <script type="text/javascript">
        var chart = null;
        var playerListValue = "";
        $(function () {
            //Get data for dropdown list
            $.ajax({
                url: '@Url.Action("GetPlayersForUser", "Stats")',
                type: "GET",
                async: false,
                success: function (response) {
                    for (var i = 0; i < response.length; i++) {
                        var o = new Option(response[i].Name, response[i].IdPlayer);
                        $("#playerList").append(o);
                    }
                }
            });

            //SignalR Proxy created on the fly
            var info = $.connection.jobHub;

            //attach callback for service broker notification
            info.client.changeEntity = function (callbackData) {
                console.log("update has be done");
                playerListValue = $("#playerList").val();
                if (playerListValue != null) {
                    info.server.getReportForPlayer(playerListValue).done(function (data) {
                        getDataForChartCallback(data);
                    })
                }
            };

            //init signalR hub
            $.connection.hub.start().done(function () {
               playerListValue = $("#playerList").val();
               if (playerListValue != null) {
                   info.server.getReportForPlayer(playerListValue)
                       .done(function (data) {
                              getDataForChartCallback(data);
                        })
                 }
            });

       
            $("#playerList").change(function () {
                playerListValue = $("#playerList").val();
                if (playerListValue != null) {
                    info.server.getReportForPlayer(playerListValue)
                        .done(function (data) {
                            getDataForChartCallback(data);
                        })
                }
            });

            $("#export").click(function () {
                GetExcelReport(playerListValue);
            });

            //Functions
            function GetExcelReport(idPlayer) {

                $.ajax({
                    url: '@Url.Action("ExportToExcel", "Stats")',
                    type: "POST",
                    data: { idPlayer: idPlayer },
                    success: function (data) {
                        window.location = '/Stats/Download?fileGuid=' + data.FileGuid
                            + '&filename=' + data.FileName;
                    }
                });
            }

            function getDataForChartCallback(calbackData) {

                var dates = [];
                var attackData = [];
                var dribblingData = [];
                var speedData = [];
                var passingData = [];

                for (i = 0; i < calbackData.length; i++) {               

                    dates.push(calbackData[i].Date.substr(0,7));
                    attackData.push(calbackData[i].Attack);
                    dribblingData.push(calbackData[i].Dribble);
                    speedData.push(calbackData[i].Speed);
                    passingData.push(calbackData[i].Passing);
                }

                var ctx = document.getElementById('myChart').getContext('2d');

                if (chart != null) {
                    chart.destroy();
                }
                chart = new Chart(ctx, {
                    // The type of chart we want to create
                    type: 'line',

                    // The data for our dataset
                    data: {
                        labels: dates,
                        datasets: [
                            {
                                label: "Attack",
                                fill: false,
                                lineTension: 0,
                                borderColor: 'rgb(255, 99, 132)',
                                data: attackData,
                            },
                            {
                                label: "Dribble",
                                fill: false,
                                lineTension: 0,
                                borderColor: 'rgb(100, 50, 123)',
                                data: dribblingData,
                            },
                            {
                                label: "Speed",
                                fill: false,
                                lineTension: 0,
                                borderColor: 'rgb(50, 100, 123)',
                                data: speedData,
                            },
                            {
                                label: "Passing",
                                fill: false,
                                lineTension: 0,
                                borderColor: 'rgb(10, 45, 123)',
                                data: passingData,
                            }
                        ]
                    },
                    // Configuration options go here
                    options: {}
                });
            }
        });
    </script>
}
